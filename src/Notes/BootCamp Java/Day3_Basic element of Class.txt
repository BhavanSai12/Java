class:
collection of data members(variables/attributes/states) and methods(behaviours)
Syn:
class classname
{
datamembers
methods
}
Ex:
class Student
{
rno
name
fee
clgname
read()
write()
prepare()
walk()
eat()
}

Object: it is an instance of class
Class is a blueprint for creating objects
syn:
classname objectname=new classname();
Student s=new Student();
Student is the class
s is the object
Class is a real world logical/imaginary entity ,which has state and behaviour
Object is a real world physical entity ,which decribes state and behaviour
Student is a class ,objects are kiran,sai,venkat reddy

class is a collection inter related objects

Venu,Saketh-------Faculties
kiran,sai,venkat----Students
java,python------Course

Structure of java Program:

documentation  section: 
package section
import package section
interface defiantion
class defination

class with main method

class Test
{
public static void main(String args[])
{
System.out.println("hello every one");
}
}


Can we use more no classes in a java program?
yes ,we can use

class A
{
public static void main(String args[])
{
System.out.println("A class Method");
}
}
class B
{
public static void main(String args[])
{
System.out.println("B class Method");
}
}
class C
{
}


float a=12.45f;

12.45
decimal 
all decimals are bydefault double type

boolean byte short char int long float double
         1     2     2   4   8    4      8

double a=12.5;
float b=(float)a;

float f=(float)12.45;
or
float f=12.45f;


Method:
Method is a group of statements used to perform some task or operations
Methods are 2 types:
1)Built in Methods
methods are which are already available in the java Library
Ex: Math.sqrt(4);
    String s="codegnan";
     s.length();

2)user defined methods:
methods which are used to implements business logics for the user 
requirements 
void fact(n);
double findArea(double l,double b);

How to create a user defined methods:
1) method defination:
syn:
datatype/return type methodname(arguments)
{
//buiseness logic
//method logics
[return] statements;
}

2)method call

syn:
methodname(actualarguments);
or
datatype var=methodname(actualarguments);

Examples:
int sum()
{

return 10;
}

int ans=sum();

int sum(int a,int b)
{
return a+b;
}

int s=sum(10,20);
int s=sum(a,b);
int s=sum(p,q);

void sum()
{

}
sum();
method calls used inside the main method/any user defined method
method definations are outside of main method

Basically user defined methods are classfied as 2 types
1)instance method:
methods which are accessed by using objects are called
and not uses static keyword before the method name

2)static method
methods which are accessed by directly or using classname are
called and uses static keyword before the method name


Ex1:
display a text message using instance method

method prototype/signature

void greet(); 

class Test
{
void greet() //method defination
{
System.out.println("welcome to java methods");
}
public static void main(String args[])
{
Test ob=new Test();
ob.greet(); //method call
}
}

Ex2:

display a text message using static method

method prototype/signature

static void greet(); 

class Test
{
static void greet() //method defination
{
System.out.println("welcome to static methods");
}
public static void main(String args[])
{
greet(); //method call
}
}

class A
{
static void greet() //method defination
{
System.out.println("A class static methods");
}
}
class Test
{
public static void main(String args[])
{
A.greet(); //method call
}
}

Math is class
sqrt() is static method
pow(2,3) is static method
Math.sqrt(5);
Math.pow(2,3);

import java.util.*;
Scanner sc=new Scanner(System.in);
sc.nextInt(); // instance method
sc.next();   //instance method

find the sum of 2 numbers using various method signatures
ex1:
method has no return type and no arguments
void sum();

class Test
{
void sum()
{
int a=10,b=20;
System.out.println(a+b);
}
public static void main(String args[])
{
Test ob=new Test();
ob.sum();
}
}






ex2:
method has  return type and no arguments
int sum();
class Test
{
int sum()
{
int a=1000,b=2000;
return a+b;
}
public static void main(String args[])
{
Test ob=new Test();
int ans=ob.sum();
System.out.println(ans);
}
}




ex3:
method has no return type and  arguments
void sum(int a,int b);
class Test
{
void sum(int a,int b)
{
System.out.println(a+b);
}
public static void main(String args[])
{
Test ob=new Test();
ob.sum(100,200);
}
}
ex4:
method has return type and  arguments
int sum(int a,int b);


import java.util.Scanner;
class Test
{
int sum(int a,int b)
{
return a+b;
}
public static void main(String args[])
{
Test ob=new Test();
Scanner s=new Scanner(System.in);
System.out.println("Enter the a and b values");
int a=s.nextInt();
int b=s.nextInt();
System.out.println(ob.sum(a,b));
}
}


Programs.exercises.Assignment:
create a class Calc and do the following operations
add()
sub()
with the given 2 data members

class Calc
{
int a=10;
int b=2;
void add()
{
System.out.println(a+b);
}
void sub()
{
System.out.println(a-b);
}
public static void main(String args[])
{
Calc ob=new Calc();
ob.add();
ob.sub();
}
}

class Calc
{
int a=10;
int b=2;
void add()
{
sub();
System.out.println(a+b);
}
void sub()
{
System.out.println(a-b);
}
public static void main(String args[])
{
Calc ob=new Calc();
ob.add();
}
}














float range is greater than long range
float is in exponentioal format















































































 


































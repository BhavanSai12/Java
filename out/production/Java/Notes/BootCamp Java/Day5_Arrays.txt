class consists of elements
1)variables
  instance and static variables
2)methods
  static and instance methods
3)constructor
4)blocks   
 static and instance blocks

Assign: create a class Student ,it has datamembers
rno,name and fee .use 2 methods read and display the student 
details
class Student
{
rno
name
fee
void readData(int r,String n,double f)
void showData()
}

Ex1:

public class Student {
     int rno;
     String name;
     double fee;
     void readData(int r,String n,double f)
     {
    	rno=r;
    	name=n;
    	fee=f;
     }
     void showData()
     {
    System.out.println("Name of the Student: "+name);	 
    System.out.println("RollNo of the Student: "+rno);	
    System.out.println("Student Fee: "+fee);	
     }
	
	public static void main(String[] args) {
    Student s=new Student();
    s.readData(345,"sairam",45000.00);
    s.showData();

	}

}
Constructor:

constructor is intialize the object values of class.
constructor is intilize the object also.
constructor is assign values for the data members of the class.

Rules:
1)constructor name is same name of class
2)constructor is a special method but no retunrtype
3)constructor is called automatically after creating object.

ex:

public class Test {
public Test() {
	System.out.println("this is constructor");
	}
	public static void main(String[] args) {
  Test t=new Test();
}
}

constructor types:
1)default constructor:
when the class has no constructor default constructor is
added by jvm.

public classname()
{

}


2)zero Arg constructor or non-parameterized constructor

constructor whcih has no arguments are called zero arg constructor
classname()
{
sop("zero arg constructor");
}


3)parameterzied constructor
constructor with arguments are called parameterized constructor
classname(datatype arg1,datatype arg2...)
{

}


Assign: create a class Student ,it has datamembers
rno,name and fee .use constructor to assign values  and display the student 
details by using method 


public class Student {
     int rno;
     String name;
     double fee;
   Student()
   {
rno=123;
name="kiran";
fee=45000.00;
	}

     void showData()
     {
    System.out.println("Name of the Student: "+name);	 
    System.out.println("RollNo of the Student: "+rno);	
    System.out.println("Student Fee: "+fee);	
     }
	
	public static void main(String[] args) {
    Student s=new Student();
     s.showData();

	}

}


create a parameterized constructor and implements the above assign:

public class Student {
     int rno;
     String name;
     double fee;
   Student(int r,String n,double f)
   {
rno=r;
name=n;
fee=f;
	}

     void showData()
     {
    System.out.println("Name of the Student: "+name);	 
    System.out.println("RollNo of the Student: "+rno);	
    System.out.println("Student Fee: "+fee);	
     }
	
	public static void main(String[] args) {
    Student s1=new Student(120,"nikil",65000.00);
     s1.showData();
     Student s2=new Student(123,"shiva",55000.00);
     s2.showData();

	}

}

this:
is seperates local and instance variables.
this represents current class instance/object


Ex:

public class Student {
     int rno;
     String name;
     double fee;
   Student(int rno,String name,double fee)
   {
this.rno=rno;
this.name=name;
this.fee=fee;
	}

     void showData()
     {
    System.out.println("Name of the Student: "+name);	 
    System.out.println("RollNo of the Student: "+rno);	
    System.out.println("Student Fee: "+fee);	
     }
	
	public static void main(String[] args) {
    Student s1=new Student(120,"nikil",65000.00);
     s1.showData();
     Student s2=new Student(123,"shiva",55000.00);
     s2.showData();

	}

}

constructor overloading:
constructor with different arguments
Ex:

public class Test {
public Test(int a) {
	System.out.println("constructor with single argument");
	}
public Test(int a,int b) {
	System.out.println("constructor with double arguments");
	}
	public static void main(String[] args) {
  Test t1=new Test(10);
  Test t2=new Test(10,20);
}
}
this(): used to call one constructor to another constructor


this(): default constructor 
this(10,20): parameterized constructor
this(10):parameterized constructor


public class Test {
public Test(int a) {
	 this(50,100); // this is first statement
	System.out.println("constructor with single argument");
	}
public Test(int a,int b) {
	System.out.println("constructor with double arguments");
	}
	public static void main(String[] args) {
  Test t1=new Test(10);


}
}


static block:
static blocks are executed during the class loading .before the main
method.
to create a static block use static keyword
syn:
static
{
//body
}


Ex:

public class Blocks {

	static
	{
	System.out.println("first");
	}
	public static void main(String[] args) {
  System.out.println("second ");

	}

}

the purpose of static blocks is used assign the values for
static variables during class loading.

Ex:

public class Blocks {
   static int a;
   static int b;
	static
	{
	a=100;
	b=200;
	}
	public static void add()
	{
		System.out.println("the sum: "+(a+b));
	}
	public static void main(String[] args) {
      add();

	}

}

instance block:
syn:
{
//body
}
instance blocks are used to assign the values for
instance variables
the instance blocks are executed during the object creation



public class Blocks {
  int a;
	
	{
	a=100;
	}


	public static void main(String[] args) {
      Blocks ob=new Blocks();
      System.out.println("value of a: "+ob.a);

	}

}


Ex:
public class Blocks {
   int a=100;
   static int b=20;
   static int c=30;
   static int d;
   int e;
   int f;
   void add() //access instance and static variables
   {
	 System.out.println(a+b);  
   }
   static void mul()//access only static variables
   {
	   System.out.println(b*c);  
   }
   Blocks()
   {
	 f=500;
	 System.out.println(f);
   }
  static
  {
	d=400;
	System.out.println(d);
  }
  {
	e=500;  
	System.out.println(e);
  }

	public static void main(String[] args) {
      Blocks ob=new Blocks();
         ob.add();
         



Output:
400
500
500
120
600



class CodeGnan{
int m;
static int n;
void  m1() {
m = 10;
n = 20;
}
static void m2() {
n = 40;
}
void display(){
System.out.println("m="+m+" "+"n="+n);
}
}

public class GuessOutput {

	public static void main(String[] args) {

		CodeGnan cg1 = new CodeGnan();
		cg1.m1();
		cg1.display();//m=? n=?
       CodeGnan cg2 = new CodeGnan();
	cg2.display();  //m=? n=?
CodeGnan cg3 = new CodeGnan();
cg3.m1();
cg3.m2();
cg3.display(); // m=? n=?
CodeGnan cg4 = new CodeGnan();
CodeGnan.n=60;
cg4.display();  //m=? n=?

}
}


m=10 n=20
m=0 n=20
m=10 n=40

m=0 n=60



Array:
is collection of similar data type elements
is also collection of homogeneous elements
array can assign multiple values
array variable can assign multiple values
array uses contigious/continuous memory locations

syn:
datatype arrvar=new datatype[arraysize]);
int a=new int[5];
a is an integer array having 5 elements
String s=new String[3];
s is string array
assign values into array

int[] a=new int[3];

array uses index to get the array elements
if array size is n the index starts from 0 to n-1
array size:3
indexes are 0 1 2 
a[0]=10;
a[1]=20;
a[3]=30;

Ex1:

public class ArrayEx {

	public static void main(String[] args) {
		int[] a=new int[3];
		a[0]=10;
		a[1]=20;
		a[2]=30;
		System.out.println(a[0]);
		System.out.println(a[1]);
		System.out.println(a[2]);

	}

}


length is a variable to find the no elements in an Array.
Ex2:

public class ArrayEx {

	public static void main(String[] args) {
		int[] a= {10,20,30,40,50};
	 System.out.println("Array is");
	 for(int i=0;i<a.length;i++)
		 System.out.println(a[i]);



	}

}


Ex3:

public class ArrayEx {

	public static void main(String[] args) {
		int[] a=new int[5];
	 System.out.println("Array is");
	 for(int i=0;i<a.length;i++)
		 System.out.println(a[i]);



	}

}

Ex:

public class ArrayEx {

	public static void main(String[] args) {
		int[] a=new int[5];
System.out.println(a[5]);



	}

}


output:Exception is raised

Ex:
public class ArrayEx {

	public static void main(String[] args) {
		int[] a=new int[5];
     System.out.println(a);



	}

}


output:
@[hexadeciaml]




public class ArrayEx {

	public static void main(String[] args) {
     int a=100;//4 bytes
     long b=a;//8 bytes //wideninng
     System.out.println(a);
     System.out.println(b);
     
     long c=100;
     int d=(int) c; //narrowing //explicit type casting


     System.out.println(c);
     System.out.println(d);


	}

}













































